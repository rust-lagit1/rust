- // MIR for `float_to_exponential_common` before GVN
+ // MIR for `float_to_exponential_common` after GVN
  
  fn float_to_exponential_common(_1: &mut Formatter<'_>, _2: &T, _3: bool) -> Result<(), std::fmt::Error> {
      debug fmt => _1;
      debug num => _2;
      debug upper => _3;
      let mut _0: std::result::Result<(), std::fmt::Error>;
      let _4: bool;
      let mut _5: &std::fmt::Formatter<'_>;
      let mut _7: std::option::Option<usize>;
      let mut _8: isize;
      let mut _10: &mut std::fmt::Formatter<'_>;
      let mut _11: &T;
      let mut _12: core::num::flt2dec::Sign;
      let mut _13: u32;
      let mut _14: u32;
      let mut _15: usize;
      let mut _16: bool;
      let mut _17: &mut std::fmt::Formatter<'_>;
      let mut _18: &T;
      let mut _19: core::num::flt2dec::Sign;
      let mut _20: bool;
      scope 1 {
          debug force_sign => _4;
          let _6: core::num::flt2dec::Sign;
          scope 2 {
              debug sign => _6;
              scope 3 {
                  debug precision => _9;
                  let _9: usize;
                  scope 4 (inlined Formatter::<'_>::precision) {
                      scope 5 (inlined FormattingOptions::get_precision) {
                      }
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_4);
          StorageLive(_5);
          _5 = &(*_1);
          _4 = Formatter::<'_>::sign_plus(move _5) -> [return: bb1, unwind continue];
      }
  
      bb1: {
          StorageDead(_5);
          StorageLive(_6);
          switchInt(copy _4) -> [0: bb3, otherwise: bb2];
      }
  
      bb2: {
-         _6 = MinusPlus;
+         _6 = const MinusPlus;
          goto -> bb4;
      }
  
      bb3: {
-         _6 = core::num::flt2dec::Sign::Minus;
+         _6 = const core::num::flt2dec::Sign::Minus;
          goto -> bb4;
      }
  
      bb4: {
          StorageLive(_7);
          _7 = copy (((*_1).0: std::fmt::FormattingOptions).4: std::option::Option<usize>);
          _8 = discriminant(_7);
          switchInt(move _8) -> [1: bb5, 0: bb7, otherwise: bb10];
      }
  
      bb5: {
-         StorageLive(_9);
+         nop;
          _9 = copy ((_7 as Some).0: usize);
          StorageLive(_10);
          _10 = copy _1;
          StorageLive(_11);
          _11 = copy _2;
          StorageLive(_12);
          _12 = copy _6;
          StorageLive(_13);
          StorageLive(_14);
          StorageLive(_15);
          _15 = copy _9;
-         _14 = move _15 as u32 (IntToInt);
+         _14 = copy _9 as u32 (IntToInt);
          StorageDead(_15);
          _13 = Add(move _14, const 1_u32);
          StorageDead(_14);
          StorageLive(_16);
          _16 = copy _3;
-         _0 = float_to_exponential_common_exact::<T>(move _10, move _11, move _12, move _13, move _16) -> [return: bb6, unwind continue];
+         _0 = float_to_exponential_common_exact::<T>(copy _1, copy _2, move _12, move _13, copy _3) -> [return: bb6, unwind continue];
      }
  
      bb6: {
          StorageDead(_16);
          StorageDead(_13);
          StorageDead(_12);
          StorageDead(_11);
          StorageDead(_10);
-         StorageDead(_9);
+         nop;
          goto -> bb9;
      }
  
      bb7: {
          StorageLive(_17);
          _17 = copy _1;
          StorageLive(_18);
          _18 = copy _2;
          StorageLive(_19);
          _19 = copy _6;
          StorageLive(_20);
          _20 = copy _3;
-         _0 = float_to_exponential_common_shortest::<T>(move _17, move _18, move _19, move _20) -> [return: bb8, unwind continue];
+         _0 = float_to_exponential_common_shortest::<T>(copy _1, copy _2, move _19, copy _3) -> [return: bb8, unwind continue];
      }
  
      bb8: {
          StorageDead(_20);
          StorageDead(_19);
          StorageDead(_18);
          StorageDead(_17);
          goto -> bb9;
      }
  
      bb9: {
          StorageDead(_6);
          StorageDead(_4);
          StorageDead(_7);
          return;
      }
  
      bb10: {
          unreachable;
      }
  }
  
